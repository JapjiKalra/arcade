#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <string.h>
#include <conio.h>
#include <stdio.h>
#ifdef _WIN32
#include <Windows.h>
#else
#include <unistd.h>
#endif
using namespace std;

enum cdir { CSTOP = 0, CLEFT = 1, CUPLEFT = 2, CDOWNLEFT = 3, CRIGHT = 4, CUPRIGHT = 5, CDOWNRIGHT = 6  };

class cball
{
private:
    int c_x, c_y;
    int original_cx,original_cy;
    cdir cdirection;
public:
    cball(int posx , int posy)
    {
        original_cx=posx;
        original_cy=posy;
        c_x=posx;
        c_y=posy;
        cdirection = CSTOP;
    }

    void reset()
    {
        c_x=original_cx;
        c_y=original_cy;
        cdirection = CSTOP;

    }
    void changedirection(cdir d)
    {
        cdirection= d;
    }

    void randomdirection()
    {
        cdirection = (cdir)((rand()%6)+1);
    }

    inline int getx(){return c_x;}
    inline int gety(){return c_y;}
    inline cdir getdirection(){return cdirection;}
    void move()
    {
        switch (cdirection)
        {
        case CSTOP:
            break;
        case CLEFT:
            c_x--;
            break;
        case CRIGHT:
            c_x++;
            break;
        case CUPLEFT:
            c_x--;
            c_y--;
            break;
        case CDOWNLEFT:
            c_x--;
            c_y++;
            break;
        case CUPRIGHT:
            c_x++;
            c_y--;
            break;
        case CDOWNRIGHT:
            c_x++;
            c_y++;
            break;
        default:
            break;


        }

    }
    /*friend ostream & operator<< (ostream & o, cball c)
    {
       o <<"ball [" << c.x <<","<< c.y <<"][" << c.direction <<"]" ;
       return o;
    */
};


class cpaddle
{
private:
    int p_x,p_y;
    int original_px,original_py;
public:
    cpaddle()
    {
        p_x=p_y=0;

    }
    cpaddle(int posx,int posy) :cpaddle()
    {
        original_px =posx;
        original_py =posy;
        p_x=posx;
        p_y=posy;


    }
    inline void reset(){p_x=original_px ; p_y=original_py;}
    inline int getx(){return p_x;}
    inline int gety(){return p_y;}
    inline void moveUp(){p_y--;}
    inline void moveDown(){p_y++;}
    /*friend ostream & operator<< (ostream & o, cpaddle c)
    {
       o <<"paddle [" << c.x <<","<< c.y <<"]"  ;
       return o;
    }*/

};

class cgamemanager
{
private:
    int width, height;
    int score1 , score2;
    char up1 ,down1, up2, down2;
    bool quit;
    cball *ball;
    cpaddle *player1;
    cpaddle *player2;
public:
    cgamemanager(int w, int h)
    {
        srand(time(NULL));
        quit=false;
        up1='w'; up2='i';
        down1='s'; down2='k';
        score1=score2=0;
        width=w; height=h;
        ball=new cball(w/2 , h/2);
        player1= new cpaddle(1, (h/2)-3);
        player2= new cpaddle(w-2, (h/2)-3);
    }
    ~cgamemanager()
    {
        delete ball, player1, player2;
    }
    void scoreup(cpaddle *player)
    {
        if (player ==player1)
        {
            score1++;
        }

        else if (player ==player2)
        {
            score2++;
        }
        ball->reset();
        player1->reset();
        player2->reset();
    }
    void c_draw()
    {
        system("cls");
        for (int i=0; i<( width+2); i++)
        {
            cout<<"\xB2";
        }
        cout<<endl;

        for (int i=0; i<height; i++)
        {
            for (int j=0; j<width; j++)
            {
                int ballx= ball->getx();
                int bally= ball->gety();
                int player1x =player1->getx();
                int player2x =player2->getx();
                int player1y =player1->gety();
                int player2y =player2->gety();

                if(j==0)
                    cout<<"\xB2";

                if(ballx==j && bally==i)
                {
                    cout<<"O";
                }
                else if(player1x==j && player1y==i)
                {
                    cout<<"\xDB";
                }
                else if(player2x==j && player2y==i)
                {
                    cout<<"\xDB";
                }

                 else if(player1x==j && player1y+1==i)
                {
                    cout<<"\xDB";
                }
                 else if(player1x==j && player1y+2==i)
                {
                    cout<<"\xDB";
                }
                 else if(player1x==j && player1y+3==i)
                {
                    cout<<"\xDB";
                }

                else if(player2x==j && player2y+1==i)
                {
                    cout<<"\xDB";
                }
                 else if(player2x==j && player2y+2==i)
                {
                    cout<<"\xDB";
                }
                 else if(player2x==j && player2y+3==i)
                {
                    cout<<"\xDB";
                }





                else
                    cout<<" ";

                if(j==width-1)
                    cout<<"\xB2";
            }
            cout<<endl;

        }



        for (int i=0;i<( width+2); i++)
        {
            cout<<"\xB2";
        }
        cout<<endl;
        cout<<"score1 :"<<score1<<endl;
        cout<<"score2 :"<<score2<<endl;
    }

    void c_input()
    {
        ball->move();
        int ballx= ball->getx();
        int bally= ball->gety();
        int player1x =player1->getx();
        int player2x =player2->getx();
        int player1y =player1->gety();
        int player2y =player2->gety();
        if (_kbhit())
        {
            char current = ' ';
            current = _getch();
            if (current==up1)
            {
                if (player1y>0)
                    player1->moveUp();
            }
            if (current==up2)
            {
                if (player2y>0)
                    player2->moveUp();
            }
            if (current==down1)
            {
                if (player1y+4<height)
                    player1->moveDown();
            }
             if (current==down2)
            {
                if (player2y+4 < height)
                    player2->moveDown();
            }

            if(ball->getdirection() == CSTOP)
                ball->randomdirection();

            if (current== 'q')
                quit=true;



        }

    }
    void c_logic()
    {
        int ballx= ball->getx();
        int bally= ball->gety();
        int player1x =player1->getx();
        int player2x =player2->getx();
        int player1y =player1->gety();
        int player2y =player2->gety();
  //left paddle
        for (int i=0;i<4 ;i++)
        {
            if(ballx== player1x +1)
            {
                if (bally == player1y+i)
                {
                    ball->changedirection((cdir)((rand()%3)+ 4));
                }
            }
        }

   //right paddle
        for (int i=0;i<4 ;i++)
        {
            if(ballx== player2x - 1)
            {
                if (bally == player2y+i)
                {
                    ball->changedirection((cdir)((rand()%3)+ 1));
                }
            }
        }
       //bottom wall
        if(bally ==height -1)
        {
            ball->changedirection(ball->getdirection()== CDOWNRIGHT ? CUPRIGHT : CUPLEFT );
        }

        //top wall
        if(bally == 0)
        {
            ball->changedirection(ball->getdirection()== CUPRIGHT? CDOWNRIGHT : CDOWNLEFT );
        }

        //right wall
        if (ballx==width -1)
            scoreup(player1);
        //left wall
        if (ballx==0)
            scoreup(player2);


    }

    void run()
    {
        while(!quit)
        {
            c_draw();
            c_input();
            c_logic();
            Sleep(100);

        }
    }

};



void iteration2 ()
{

    cgamemanager c(40,20);
    c.run();


}

